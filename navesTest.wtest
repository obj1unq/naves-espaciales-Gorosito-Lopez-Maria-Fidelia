import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}

}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros()
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}

}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate()
	const naveEnAtaque = new NaveDeCombate(modo = ataque)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("Â¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}
}


describe "nave sin velocidad tras propulsar" {
  test "indica si la velocidad de 0 post propulsar da 20000" {
	const nave = new NaveDeCarga()
	nave.propulsar()
	assert.equals(20000, nave.velocidad())
  }
}

describe "test 2" {
  test "nave que transporta 5000 residuos radiactivos" {
	const nave =  new NaveDeResiduosRadiactivos()
	nave.carga(5000)
	nave.recibirAmenaza()
	assert.equals(5000, nave.carga())
	assert.equals(0, nave.velocidad())
  }
}


describe "Nave preparadas" {
  test "en una nave a 290 usar prepararse para que velocidad quede en 300" {
	const nave = new NaveDePasajeros()
	nave.velocidad(290000)
	nave.preparar()
	assert.equals(300000, nave.velocidad())
  }
  test "nave de resiudos sin velocidad no sellada, preparse, queda a velocidad 15 y sellada" {
	const nave = new NaveDeResiduosRadiactivos()
	nave.preparar()
	assert.equals(15000, nave.velocidad())
	assert.that(nave.estaCerradaAlVacio())
  }
  test "nave de combate en ataque sin velocidad prepararse emite mensaje y 15 velocidad " {
	const nave = new NaveDeCombate()
	nave.modo(ataque)
	nave.preparar()
	assert.equals("Volviendo a la base", nave.ultimoMensaje())
	assert.equals(15000, nave.velocidad())
  }
  test "nave de combate en reposo sin velocidad se prepara emite saliendo, queda en modo ataque y con velocidad 15" {
	const nave = new NaveDeCombate()
	nave.modo(reposo)
	nave.preparar()
	assert.equals("Saliendo en mision", nave.ultimoMensaje())
	assert.equals(15000, nave.velocidad())
	assert.that(nave.modo().invisible()) // si esta invisible entonces esta en ataque
  }
  test "nave de pasajeros sin velocidad se encuentra con enemigo, queda en 20 y alarma activa" {
	const nave = new NaveDePasajeros()
	nave.sufrirAtaque()
	assert.equals(20000, nave.velocidad())
	assert.that(nave.alarma())
  }

}

